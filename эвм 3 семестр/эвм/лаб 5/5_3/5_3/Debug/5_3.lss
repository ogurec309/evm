
5_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000014e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000003  00800100  00800100  000001c2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001c2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000001f4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  00000234  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000707  00000000  00000000  00000264  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000643  00000000  00000000  0000096b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000266  00000000  00000000  00000fae  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000007c  00000000  00000000  00001214  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037f  00000000  00000000  00001290  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000ea  00000000  00000000  0000160f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  000016f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   8:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
   c:	0c 94 48 00 	jmp	0x90	; 0x90 <__vector_3>
  10:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  14:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_5>
  18:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  1c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  20:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  24:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  28:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  2c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  30:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  34:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  38:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  3c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  40:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  44:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  48:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  4c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  50:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  54:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  58:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  5c:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  60:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>
  64:	0c 94 46 00 	jmp	0x8c	; 0x8c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
  74:	21 e0       	ldi	r18, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
  7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
  7e:	a3 30       	cpi	r26, 0x03	; 3
  80:	b2 07       	cpc	r27, r18
  82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>
  84:	0e 94 8c 00 	call	0x118	; 0x118 <main>
  88:	0c 94 a5 00 	jmp	0x14a	; 0x14a <_exit>

0000008c <__bad_interrupt>:
  8c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000090 <__vector_3>:
 #include <avr/io.h>
 #include <avr/interrupt.h>
 char x, count, outt;
 ISR(PCINT0_vect)
 {
  90:	1f 92       	push	r1
  92:	0f 92       	push	r0
  94:	0f b6       	in	r0, 0x3f	; 63
  96:	0f 92       	push	r0
  98:	11 24       	eor	r1, r1
  9a:	2f 93       	push	r18
  9c:	8f 93       	push	r24
  9e:	9f 93       	push	r25
	 char h = (count & 0b10000000) >> 3;//Старший бит счетчика в 5 бит h
	 outt=PORTB&0xdf;//устанавливаем в 5 бит 0
  a0:	25 b1       	in	r18, 0x05	; 5
	 outt|=h;//устанваливаем в 5 бит h
  a2:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <count>
  a6:	90 78       	andi	r25, 0x80	; 128
  a8:	89 2f       	mov	r24, r25
  aa:	90 e0       	ldi	r25, 0x00	; 0
  ac:	95 95       	asr	r25
  ae:	87 95       	ror	r24
  b0:	95 95       	asr	r25
  b2:	87 95       	ror	r24
  b4:	95 95       	asr	r25
  b6:	87 95       	ror	r24
  b8:	92 2f       	mov	r25, r18
  ba:	9f 7d       	andi	r25, 0xDF	; 223
  bc:	89 2b       	or	r24, r25
  be:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <outt>
	 PORTB = outt;
  c2:	85 b9       	out	0x05, r24	; 5
 }
  c4:	9f 91       	pop	r25
  c6:	8f 91       	pop	r24
  c8:	2f 91       	pop	r18
  ca:	0f 90       	pop	r0
  cc:	0f be       	out	0x3f, r0	; 63
  ce:	0f 90       	pop	r0
  d0:	1f 90       	pop	r1
  d2:	18 95       	reti

000000d4 <__vector_5>:
 ISR(PCINT2_vect)
 {
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	8f 93       	push	r24
  e2:	9f 93       	push	r25
	 char h = (count & 0b10000000) >> 3;//Старший бит счетчика в 5 бит h
	 outt=PORTB&0xdf;//устанавливаем в 5 бит 0
  e4:	25 b1       	in	r18, 0x05	; 5
	 outt|=h;//устанваливаем в 5 бит h
  e6:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <count>
  ea:	90 78       	andi	r25, 0x80	; 128
  ec:	89 2f       	mov	r24, r25
  ee:	90 e0       	ldi	r25, 0x00	; 0
  f0:	95 95       	asr	r25
  f2:	87 95       	ror	r24
  f4:	95 95       	asr	r25
  f6:	87 95       	ror	r24
  f8:	95 95       	asr	r25
  fa:	87 95       	ror	r24
  fc:	92 2f       	mov	r25, r18
  fe:	9f 7d       	andi	r25, 0xDF	; 223
 100:	89 2b       	or	r24, r25
 102:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <outt>
	 PORTB = outt;
 106:	85 b9       	out	0x05, r24	; 5
 }
 108:	9f 91       	pop	r25
 10a:	8f 91       	pop	r24
 10c:	2f 91       	pop	r18
 10e:	0f 90       	pop	r0
 110:	0f be       	out	0x3f, r0	; 63
 112:	0f 90       	pop	r0
 114:	1f 90       	pop	r1
 116:	18 95       	reti

00000118 <main>:

 int main(void)
 {
	 x=0;
 118:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
	 DDRB = 0x20;//тк PB это светодиод и нам надо выводить его значение на логику
 11c:	80 e2       	ldi	r24, 0x20	; 32
 11e:	84 b9       	out	0x04, r24	; 4
	 DDRD = 0x00;//чтение бита из порта PD3
 120:	1a b8       	out	0x0a, r1	; 10
	 DDRB |= 0x20;//поддтяжка вверх
 122:	25 9a       	sbi	0x04, 5	; 4
	 DDRD |= 0x08;//поддтяжка вверх
 124:	53 9a       	sbi	0x0a, 3	; 10
	 PCICR = 0x05; //разрешение прерываний (разрешены группы прерываний 0 и 2 B и D)
 126:	95 e0       	ldi	r25, 0x05	; 5
 128:	90 93 68 00 	sts	0x0068, r25	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
	 //PCMSK0 = 0xFF;//разрешить всё
	 PCMSK0 = 0x20; //разрешено только PCINT0 (PB5)
 12c:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__DATA_REGION_ORIGIN__+0xb>
	 //PCMSK2 = 0xFF;//разрешить всё
	 PCMSK2 = 0x08; //разрешено только PCINT2 (PD3)
 130:	88 e0       	ldi	r24, 0x08	; 8
 132:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__DATA_REGION_ORIGIN__+0xd>
	 sei();//разрешение прерываний
 136:	78 94       	sei
	 while (1)
	 {
		 PORTC = count;
 138:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 13c:	88 b9       	out	0x08, r24	; 8
		 count++;
 13e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <count>
 142:	8f 5f       	subi	r24, 0xFF	; 255
 144:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <count>
 148:	f7 cf       	rjmp	.-18     	; 0x138 <main+0x20>

0000014a <_exit>:
 14a:	f8 94       	cli

0000014c <__stop_program>:
 14c:	ff cf       	rjmp	.-2      	; 0x14c <__stop_program>
