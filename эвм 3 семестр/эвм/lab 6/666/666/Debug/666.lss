
666.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000018  00800100  00000134  000001c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000134  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800118  00800118  000001e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000210  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000006dd  00000000  00000000  00000278  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000633  00000000  00000000  00000955  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000224  00000000  00000000  00000f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000054  00000000  00000000  000011ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000037c  00000000  00000000  00001200  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000063  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  000015df  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_20>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e4 e3       	ldi	r30, 0x34	; 52
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a8 31       	cpi	r26, 0x18	; 24
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a8 e1       	ldi	r26, 0x18	; 24
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 31       	cpi	r26, 0x1A	; 26
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 80 00 	call	0x100	; 0x100 <main>
  9e:	0c 94 98 00 	jmp	0x130	; 0x130 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <__vector_20>:
#include <avr/io.h>
#include <avr/interrupt.h>
int i = 0;
char Msg[23]={'A', 't', 'm', 'e', 'g', 'a', '3', '2', '8', 'P', ':', 'R', 'e', 'a', 'd', 'y', 'T', 'o', 'W', 'o', 'r', 'k', '\n'};
ISR (USART_TX_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	8f 93       	push	r24
  b2:	9f 93       	push	r25
  b4:	ef 93       	push	r30
  b6:	ff 93       	push	r31
	if (i <= 22){
  b8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
  bc:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
  c0:	87 31       	cpi	r24, 0x17	; 23
  c2:	91 05       	cpc	r25, r1
  c4:	64 f4       	brge	.+24     	; 0xde <__vector_20+0x38>
		i++;
  c6:	01 96       	adiw	r24, 0x01	; 1
  c8:	90 93 19 01 	sts	0x0119, r25	; 0x800119 <__data_end+0x1>
  cc:	80 93 18 01 	sts	0x0118, r24	; 0x800118 <__data_end>
		UDR0 = Msg[i];
  d0:	fc 01       	movw	r30, r24
  d2:	e0 50       	subi	r30, 0x00	; 0
  d4:	ff 4f       	sbci	r31, 0xFF	; 255
  d6:	80 81       	ld	r24, Z
  d8:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
  dc:	08 c0       	rjmp	.+16     	; 0xee <__vector_20+0x48>
	}
	else{
		i = 0;
  de:	10 92 19 01 	sts	0x0119, r1	; 0x800119 <__data_end+0x1>
  e2:	10 92 18 01 	sts	0x0118, r1	; 0x800118 <__data_end>
		UDR0 = Msg[i];
  e6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Msg>
  ea:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	}
}
  ee:	ff 91       	pop	r31
  f0:	ef 91       	pop	r30
  f2:	9f 91       	pop	r25
  f4:	8f 91       	pop	r24
  f6:	0f 90       	pop	r0
  f8:	0f be       	out	0x3f, r0	; 63
  fa:	0f 90       	pop	r0
  fc:	1f 90       	pop	r1
  fe:	18 95       	reti

00000100 <main>:
int main(void){
	UBRR0 = 103;
 100:	87 e6       	ldi	r24, 0x67	; 103
 102:	90 e0       	ldi	r25, 0x00	; 0
 104:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
 108:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	UCSR0B = (1<<TXCIE0)|(1<<TXEN0);
 10c:	88 e4       	ldi	r24, 0x48	; 72
 10e:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
	UCSR0C = (1<<UCSZ01)|(1<<UCSZ00);
 112:	86 e0       	ldi	r24, 0x06	; 6
 114:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	if (i == 0){
 118:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <__data_end>
 11c:	90 91 19 01 	lds	r25, 0x0119	; 0x800119 <__data_end+0x1>
 120:	89 2b       	or	r24, r25
 122:	21 f4       	brne	.+8      	; 0x12c <main+0x2c>
		UDR0 = Msg[0];
 124:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <Msg>
 128:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	}
	sei();
 12c:	78 94       	sei
 12e:	ff cf       	rjmp	.-2      	; 0x12e <main+0x2e>

00000130 <_exit>:
 130:	f8 94       	cli

00000132 <__stop_program>:
 132:	ff cf       	rjmp	.-2      	; 0x132 <__stop_program>
